openapi: 3.0.0
info:
  title: Driver API
  version: 1.0.0
  description: |
    The **Driver API** provides endpoints for managing driver information in the system.
    It allows clients (such as frontend or mobile applications) to:
      - Retrieve driver profiles and details
      - Update driver personal information
      - Manage vehicles associated with drivers
      - Handle driver documents
      - Access driver earnings and summaries

    This API is typically used by the public-facing application layer and communicates
    with the Driver domain service internally.  
    Authentication is required via JWT bearer tokens.

servers:
  - url: http://localhost:8080/api/v1

security:
  - bearerAuth: []

paths:
  /drivers:
    get:
      summary: Get list of drivers
      
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/ItemsPerPageParam'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  drivers:
                    type: array
                    items:
                      $ref: '#/components/schemas/Driver'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'

  /drivers/{id}:
    get:
      summary: Get driver by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Driver'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/DriverNotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    patch:
      summary: Update driver by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                avatar:
                  type: string
           
      responses:
        '204':
          description: Driver updated successfully (no content)
        '400':
          $ref: '#/components/responses/InvalidInput'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/DriverNotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /drivers/{id}/vehicles:
    get:
      summary: Get vehicles by driver ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vehicle'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/DriverNotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      summary: Create vehicle for a driver
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                license:
                  type: string
                seats:
                  type: integer
                category:
                  type: string
                brand:
                  type: string
              required:
                - name
                - license
                - seats
                - category
      responses:
          '201':
            description: Vehicle created successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Vehicle'
          '400':
            $ref: '#/components/responses/InvalidInput'
          '403':
            $ref: '#/components/responses/UnauthorizedError'
          '404':
            $ref: '#/components/responses/DriverNotFound'
          '500':
            $ref: '#/components/responses/ServerError'
              
  /drivers/{driverId}/vehicles/{vehicleId}:
    get:
      summary: Get vehicle by ID for a driver
      parameters:
        - in: path
          name: driverId
          required: true
          schema:
            type: string
        - in: path
          name: vehicleId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/VehicleNotFound'        
        '500':
          $ref: '#/components/responses/ServerError'

    put:
      summary: Update vehicle by ID for a driver
      
      parameters:
        - in: path
          name: driverId
          required: true
          schema:
            type: string
        - in: path
          name: vehicleId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                license:
                  type: string
                seats:
                  type: integer
                category:
                  type: string
                brand:
                  type: string
              required:
                - name
                - license
                - seats
                - category
                - brand
      responses:
        '204':
          description: Vehicle updated successfully (no-content)
        '400':
          $ref: '#/components/responses/InvalidInput'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/VehicleNotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      summary: Delete vehicle by ID for a driver

      parameters:
        - in: path
          name: driverId
          required: true
          schema:
            type: string
        - in: path
          name: vehicleId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Vehicle deleted successfully (no content)
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/VehicleNotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /drivers/{id}/documents:
    get:
      summary: Get documents by driver ID
      
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/DriverNotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      summary: Create document for a driver
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                mediaId:
                  type: string
                verifiedStatus:
                  type: string
                expiresAt:
                  type: string
                  format: date
              required:
                - type
                - mediaId
                - verifiedStatus
                - expiresAt
      responses:
          '201':
            description: Document created successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Document'
          '400':
            $ref: '#/components/responses/InvalidInput'
          '403':
            $ref: '#/components/responses/UnauthorizedError'
          '404':
            $ref: '#/components/responses/DriverNotFound'
          '500':
            $ref: '#/components/responses/ServerError'
              
  /drivers/{driverId}/documents/{documentId}:

    get:
      summary: Get document by ID for a driver
      parameters:
        - in: path
          name: driverId
          required: true
          schema:
            type: string
        - in: path
          name: documentId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/DocumentNotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      summary: Update document by ID for a driver
      
      parameters:
        - in: path
          name: driverId
          required: true
          schema:
            type: string
        - in: path
          name: documentId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                mediaId:
                  type: string
                verifiedStatus:
                  type: string
                expiresAt:
                  type: string
                  format: date
              required:
                - type
                - mediaId
                - verifiedStatus
                - expiresAt
      responses:
        '204':
          description: Document updated successfully (no-content)
        '400':
          $ref: '#/components/responses/InvalidInput'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/DocumentNotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      summary: Delete document by ID for a driver
      
      parameters:
        - in: path
          name: driverId
          required: true
          schema:
            type: string
        - in: path
          name: documentId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Document deleted successfully (no content)
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/DocumentNotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /drivers/{driverId}/earnings:
    get:
      summary: Get earnings by driver ID
      
      parameters:
        - in: path
          name: driverId
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/ItemsPerPageParam'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  earnings:
                    type: array
                    items:
                      $ref: '#/components/schemas/Earnings'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/DriverNotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /drivers/admin//earnings:
    get:
      summary: Get earnings summary of drivers
      
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/ItemsPerPageParam'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  earnings:
                    type: array
                    items:
                      $ref: '#/components/schemas/Earnings'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
  
components:
  schemas:
    Driver:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        phone:
          type: string
        email:
          type: string
        avatar:
          type: string        
        rating:
          type: number
          format: float
        numberOfRatings:
          type: integer
        creditBalance:
          type: number
        cashBalance:
          type: number

    Vehicle:
      type: object
      properties:
        id:
          type: string
        driverId: 
          type: string
        name:
          type: string
        license:
          type: string
        seats:
          type: integer
        category:
          type: string
        brand:
          type: string
        
    Document:
      type: object
      properties: 
        id:
          type: string
        driverId:
          type: string
        type: 
          type: string
        mediaId:
          type: string
        verifiedStatus:
          type: string
        expiresAt: 
          type: string
          format: date

    Earnings:
      type: object
      properties:
        id:
          type: string
        bookingId:
          type: string
        driverId: 
          type: string
        amount:
          type: number
        gross:
          type: number
        commission:
          type: number
        net: 
          type: number
    
    Pagination:
      type: object
      properties:
        totalItems:
          type: integer
        totalPages:
          type: integer
        currentPage:
          type: integer
        itemsPerPage:
          type: integer

    ErrorResponse:
      type: object
      properties:
        errorCode:
          type: string
        messageEn:
          type: string
        messageVn:
          type: string

  parameters:
    PageParam:
      in: query
      name: page
      schema:
        type: integer
      description: Current page number (default 1)

    ItemsPerPageParam:
      in: query
      name: itemsPerPage
      schema:
        type: integer
        example: 20
      description: Number of items per page (default 20)

  responses:
    UnauthorizedError:
      description: Unauthorized access
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            errorCode: UNAUTHORIZED_ACCESS
            messageEn: Unauthorized access
            messageVn: Truy cập không hợp lệ
    
    DriverNotFound:
      description: Driver not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            errorCode: DRIVER_NOT_FOUND
            messageEn: Driver not found
            messageVn: Không tìm thấy tài xế

    VehicleNotFound:
      description: Vehicle not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            errorCode: VEHICLE_NOT_FOUND
            messageEn: Vehicle not found
            messageVn: Không tìm thấy xe

    DocumentNotFound:
      description: Document not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            errorCode: DOCUMENT_NOT_FOUND
            messageEn: Document not found
            messageVn: Không tìm thấy tài liệu

    InvalidInput:
      description: Invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            errorCode: INVALID_INPUT
            messageEn: Invalid request parameters (format example)
            messageVn: Tham số yêu cầu không hợp lệ (ghi ra định dạng mẫu)

    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            errorCode: SERVER_ERROR
            messageEn: An unexpected error occurred
            messageVn: Đã xảy ra lỗi không mong muốn

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
