openapi: 3.0.0
info:
  title: Feedback API
  version: 1.0.0
  description: Provides endpoints to view, create, and delete trip feedback.
  
servers:  
  - url: http://localhost:8080/api/v1

security:
  - bearerAuth: []

paths:
  feedback/bookings/{bookingId}:
    get:
      summary: Get feedback for a specific booking
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: bookingId
          required: true
          schema:
            type: string
          description: ID of the booking to retrieve feedback for
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedback'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Create feedback for a specific booking
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: bookingId
          required: true
          schema:
            type: string
          description: ID of the booking to provide feedback for
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                rating:
                  type: integer
              required:
                - comment
                - rating
      responses:
        '201':
          description: Feedback created successfully
        '400':
          $ref: '#/components/responses/InvalidInput'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'

  /admin/feedback:
    get:
      summary: Get list of feedbacks
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Current page number (default 1)
        - in: query
          name: itemsPerPage
          schema:
            type: integer
          description: Number of items per page (default 20)
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  feedbacks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Feedback'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
 
    delete:
      summary: Delete feedback following filters
      responses:
        '204':
          description: Selected feedback deleted successfully
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        
components:
  schemas:
    Feedback:
      type: object
      properties:
        id:
          type: string
        renterId:
          type: string
        driverId:
          type: string
        bookingId:
          type: string
        rating:
          type: integer
          minimum: 1
          maximum: 5
        comment:
          type: string

    Pagination:
      type: object
      properties:
        totalItems:
          type: integer
        totalPages:
          type: integer
        currentPage:
          type: integer
        itemsPerPage:
          type: integer

    ErrorResponse:
      type: object
      properties:
        errorCode:
          type: string
        messageEn:
          type: string
        messageVn:
          type: string

  parameters:
    PageParam:
      in: query
      name: page
      schema:
        type: integer
        example: 1
      description: Current page number (default 1)

    ItemsPerPageParam:
      in: query
      name: itemsPerPage
      schema:
        type: integer
      description: Number of items per page (default 20)
    
  responses:
    UnauthorizedError:
      description: Unauthorized access
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            errorCode: UNAUTHORIZED_ACCESS
            messageEn: Unauthorized access
            messageVn: Truy cập không hợp lệ

    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            errorCode: SERVER_ERROR
            messageEn: An unexpected error occurred
            messageVn: Đã xảy ra lỗi không mong muốn
    
    InvalidInput:
      description: Invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            errorCode: INVALID_INPUT
            messageEn: Invalid request parameters (format example)
            messageVn: Tham số yêu cầu không hợp lệ (ghi ra định dạng mẫu)
    
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
